# USER_INFO 테이블 생성
CREATE TABLE USER_INFO (
  USER_NUM INT PRIMARY KEY AUTO_INCREMENT,
  USER_ID VARCHAR (20) NOT NULL,
  USER_PASS VARCHAR (255) NOT NULL,
  USER_NAME VARCHAR (32) NOT NULL,
  EMAIL VARCHAR (100),
  CONFIRM VARCHAR (2) DEFAULT 'Y',
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIME
) ENGINE = INNODB ;

# admin 계정 추가
INSERT INTO USER_INFO (
  USER_ID,
  USER_PASS,
  USER_NAME,
  EMAIL
) 
VALUES
  (
    'admin',
    PASSWORD('admin'),
    '관리자',
    'akaksr@akaksr.xyz'
  ) ;

# FILE_INFO 테이블 생성
CREATE TABLE FILE_INFO (
  FILE_KEY INT PRIMARY KEY AUTO_INCREMENT,
  USER_NUM INT NOT NULL,
  FOREIGN KEY (USER_NUM) REFERENCES USER_INFO(USER_NUM) ON DELETE CASCADE,
  FILE_ORI_NM VARCHAR(255) NOT NULL,
  FILE_SAVE_NM VARCHAR(255) NOT NULL,
  SIZE INT NOT NULL,
  EXT VARCHAR(20) NOT NULL,
  UPLOAD_DATE TIMESTAMP DEFAULT CURRENT_TIME
) ENGINE = INNODB ;

# SPLIT_FILE_INFO 테이블 생성
CREATE TABLE SPLIT_INFO (
  SPLIT_KEY INT PRIMARY KEY AUTO_INCREMENT,
  FILE_KEY INT NOT NULL,
  FOREIGN KEY (FILE_KEY) REFERENCES FILE_INFO(FILE_KEY) ON DELETE CASCADE,
  SEQ INT NOT NULL,
  SPLIT_FILE_NM VARCHAR(255) NOT NULL,
  FILE_PATH VARCHAR(255) NOT NULL,
  SIZE INT NOT NULL,
  UPLOAD_DATE TIMESTAMP DEFAULT CURRENT_TIME
) ENGINE = INNODB ;

# OPENNAS_INFO 테이블 생성
CREATE TABLE OPENNAS_INFO (
  ID INT PRIMARY KEY AUTO_INCREMENT,
  VERSION VARCHAR (20) NOT NULL,
  AUTHOR VARCHAR (255) NOT NULL,
  DB VARCHAR (30) NOT NULL
) ENGINE = INNODB ;

